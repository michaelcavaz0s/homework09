; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30723.0 

	TITLE	V:\homework09\homework09\2018 06 CS 3843 HW 09 - InlineStudent.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?gWordList@@3PAPADA				; gWordList
PUBLIC	??_C@_08LJLCIFAG@absorbed?$AA@			; `string'
PUBLIC	??_C@_0L@PMBJDDBP@abstracted?$AA@		; `string'
PUBLIC	??_C@_0O@GKIGIAGH@advertisement?$AA@		; `string'
PUBLIC	??_C@_04BBJMDMJG@ants?$AA@			; `string'
PUBLIC	??_C@_09DKPKIKB@apparatus?$AA@			; `string'
PUBLIC	??_C@_06OFEGDHIM@appear?$AA@			; `string'
PUBLIC	??_C@_03NKAHBJFB@arm?$AA@			; `string'
PUBLIC	??_C@_04MKOFIGNL@bird?$AA@			; `string'
PUBLIC	??_C@_04OBGPFBCN@blue?$AA@			; `string'
PUBLIC	??_C@_09OEHOIJPA@boundless?$AA@			; `string'
PUBLIC	??_C@_05KDNCKLED@broad?$AA@			; `string'
PUBLIC	??_C@_05HGNDGEBA@cause?$AA@			; `string'
PUBLIC	??_C@_09KLDGHJCK@ceaseless?$AA@			; `string'
PUBLIC	??_C@_08IPNIAGNA@complete?$AA@			; `string'
PUBLIC	??_C@_07IPBHEOEA@confuse?$AA@			; `string'
PUBLIC	??_C@_0M@OKFLLPBK@cooperative?$AA@		; `string'
PUBLIC	??_C@_05MGHOCOML@cover?$AA@			; `string'
PUBLIC	??_C@_06HHOEAOAH@credit?$AA@			; `string'
PUBLIC	??_C@_08MBEODLMG@devilish?$AA@			; `string'
PUBLIC	??_C@_05CFEJGMAI@dirty?$AA@			; `string'
PUBLIC	??_C@_08OJIDGIM@discreet?$AA@			; `string'
PUBLIC	??_C@_03IGFPJNLB@ear?$AA@			; `string'
PUBLIC	??_C@_07NDJOEKBM@eatable?$AA@			; `string'
PUBLIC	??_C@_0L@LEPBNBAJ@experience?$AA@		; `string'
PUBLIC	??_C@_03GABGILGN@fix?$AA@			; `string'
PUBLIC	??_C@_06ELFMPMHJ@flower?$AA@			; `string'
PUBLIC	??_C@_06BHBNKPBA@friend?$AA@			; `string'
PUBLIC	??_C@_07HGGJKPGK@furtive?$AA@			; `string'
PUBLIC	??_C@_04JECDANNM@harm?$AA@			; `string'
PUBLIC	??_C@_07EMKLAADP@harmony?$AA@			; `string'
PUBLIC	??_C@_05MJPBBKHD@heady?$AA@			; `string'
PUBLIC	??_C@_04PKENOLLO@heap?$AA@			; `string'
PUBLIC	??_C@_06GDPEBLPA@ignore?$AA@			; `string'
PUBLIC	??_C@_08FDFGBPCA@infamous?$AA@			; `string'
PUBLIC	??_C@_07PMEJOFLL@jittery?$AA@			; `string'
PUBLIC	??_C@_08JGCCIMAA@language?$AA@			; `string'
PUBLIC	??_C@_05EPEIADDB@learn?$AA@			; `string'
PUBLIC	??_C@_04HJPCFDOP@line?$AA@			; `string'
PUBLIC	??_C@_04GLMHKBCH@live?$AA@			; `string'
PUBLIC	??_C@_04JNHCHFHE@maid?$AA@			; `string'
PUBLIC	??_C@_06CHNJJJKC@melted?$AA@			; `string'
PUBLIC	??_C@_06HLKELJGF@memory?$AA@			; `string'
PUBLIC	??_C@_05MBOGDMK@nasty?$AA@			; `string'
PUBLIC	??_C@_04NPLPABOK@neck?$AA@			; `string'
PUBLIC	??_C@_05GPLCCBII@noise?$AA@			; `string'
PUBLIC	??_C@_06HDDOCMMN@orange?$AA@			; `string'
PUBLIC	??_C@_08GBCGCAM@peaceful?$AA@			; `string'
PUBLIC	??_C@_04NMOCCJGM@pine?$AA@			; `string'
PUBLIC	??_C@_07FDGPMDFF@piquant?$AA@			; `string'
PUBLIC	??_C@_09LNCGHMB@pollution?$AA@			; `string'
PUBLIC	??_C@_07JAHNBIFP@precede?$AA@			; `string'
PUBLIC	??_C@_06MBGLFIHO@profit?$AA@			; `string'
PUBLIC	??_C@_06PKAAJPKP@quiver?$AA@			; `string'
PUBLIC	??_C@_09KPCDCNIK@quizzical?$AA@			; `string'
PUBLIC	??_C@_07ENHGAJCI@request?$AA@			; `string'
PUBLIC	??_C@_06BBHCBIOO@rustic?$AA@			; `string'
PUBLIC	??_C@_0L@HGECDLGK@satisfying?$AA@		; `string'
PUBLIC	??_C@_07HKOOFPBJ@scatter?$AA@			; `string'
PUBLIC	??_C@_07PFJHCMJJ@science?$AA@			; `string'
PUBLIC	??_C@_0M@CHNNIJBM@second?9hand?$AA@		; `string'
PUBLIC	??_C@_05LOAHHBMH@shade?$AA@			; `string'
PUBLIC	??_C@_05JBBJEIBB@sharp?$AA@			; `string'
PUBLIC	??_C@_09FDFMFKKK@shivering?$AA@			; `string'
PUBLIC	??_C@_04FKMICODN@show?$AA@			; `string'
PUBLIC	??_C@_05OPIONHBI@solid?$AA@			; `string'
PUBLIC	??_C@_04KLBFFGHE@sore?$AA@			; `string'
PUBLIC	??_C@_09GKFMGHEC@squealing?$AA@			; `string'
PUBLIC	??_C@_05FAGFPHJG@start?$AA@			; `string'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	??_C@_08ENOFDNIN@terrible?$AA@			; `string'
PUBLIC	??_C@_04CEJDCDCH@test?$AA@			; `string'
PUBLIC	??_C@_06CEIHHELM@throne?$AA@			; `string'
PUBLIC	??_C@_05FIHFDHGB@tooth?$AA@			; `string'
PUBLIC	??_C@_07DFEHLGKB@womanly?$AA@			; `string'
PUBLIC	??_C@_09MELHABED@xylophone?$AA@			; `string'
PUBLIC	??_C@_05POKFBJG@zebra?$AA@			; `string'
;	COMDAT ??_C@_05POKFBJG@zebra?$AA@
CONST	SEGMENT
??_C@_05POKFBJG@zebra?$AA@ DB 'zebra', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09MELHABED@xylophone?$AA@
CONST	SEGMENT
??_C@_09MELHABED@xylophone?$AA@ DB 'xylophone', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DFEHLGKB@womanly?$AA@
CONST	SEGMENT
??_C@_07DFEHLGKB@womanly?$AA@ DB 'womanly', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FIHFDHGB@tooth?$AA@
CONST	SEGMENT
??_C@_05FIHFDHGB@tooth?$AA@ DB 'tooth', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CEIHHELM@throne?$AA@
CONST	SEGMENT
??_C@_06CEIHHELM@throne?$AA@ DB 'throne', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CEJDCDCH@test?$AA@
CONST	SEGMENT
??_C@_04CEJDCDCH@test?$AA@ DB 'test', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08ENOFDNIN@terrible?$AA@
CONST	SEGMENT
??_C@_08ENOFDNIN@terrible?$AA@ DB 'terrible', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FAGFPHJG@start?$AA@
CONST	SEGMENT
??_C@_05FAGFPHJG@start?$AA@ DB 'start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09GKFMGHEC@squealing?$AA@
CONST	SEGMENT
??_C@_09GKFMGHEC@squealing?$AA@ DB 'squealing', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04KLBFFGHE@sore?$AA@
CONST	SEGMENT
??_C@_04KLBFFGHE@sore?$AA@ DB 'sore', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05OPIONHBI@solid?$AA@
CONST	SEGMENT
??_C@_05OPIONHBI@solid?$AA@ DB 'solid', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FKMICODN@show?$AA@
CONST	SEGMENT
??_C@_04FKMICODN@show?$AA@ DB 'show', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09FDFMFKKK@shivering?$AA@
CONST	SEGMENT
??_C@_09FDFMFKKK@shivering?$AA@ DB 'shivering', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05JBBJEIBB@sharp?$AA@
CONST	SEGMENT
??_C@_05JBBJEIBB@sharp?$AA@ DB 'sharp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LOAHHBMH@shade?$AA@
CONST	SEGMENT
??_C@_05LOAHHBMH@shade?$AA@ DB 'shade', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CHNNIJBM@second?9hand?$AA@
CONST	SEGMENT
??_C@_0M@CHNNIJBM@second?9hand?$AA@ DB 'second-hand', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07PFJHCMJJ@science?$AA@
CONST	SEGMENT
??_C@_07PFJHCMJJ@science?$AA@ DB 'science', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HKOOFPBJ@scatter?$AA@
CONST	SEGMENT
??_C@_07HKOOFPBJ@scatter?$AA@ DB 'scatter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HGECDLGK@satisfying?$AA@
CONST	SEGMENT
??_C@_0L@HGECDLGK@satisfying?$AA@ DB 'satisfying', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06BBHCBIOO@rustic?$AA@
CONST	SEGMENT
??_C@_06BBHCBIOO@rustic?$AA@ DB 'rustic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ENHGAJCI@request?$AA@
CONST	SEGMENT
??_C@_07ENHGAJCI@request?$AA@ DB 'request', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KPCDCNIK@quizzical?$AA@
CONST	SEGMENT
??_C@_09KPCDCNIK@quizzical?$AA@ DB 'quizzical', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06PKAAJPKP@quiver?$AA@
CONST	SEGMENT
??_C@_06PKAAJPKP@quiver?$AA@ DB 'quiver', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MBGLFIHO@profit?$AA@
CONST	SEGMENT
??_C@_06MBGLFIHO@profit?$AA@ DB 'profit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JAHNBIFP@precede?$AA@
CONST	SEGMENT
??_C@_07JAHNBIFP@precede?$AA@ DB 'precede', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LNCGHMB@pollution?$AA@
CONST	SEGMENT
??_C@_09LNCGHMB@pollution?$AA@ DB 'pollution', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07FDGPMDFF@piquant?$AA@
CONST	SEGMENT
??_C@_07FDGPMDFF@piquant?$AA@ DB 'piquant', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NMOCCJGM@pine?$AA@
CONST	SEGMENT
??_C@_04NMOCCJGM@pine?$AA@ DB 'pine', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GBCGCAM@peaceful?$AA@
CONST	SEGMENT
??_C@_08GBCGCAM@peaceful?$AA@ DB 'peaceful', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HDDOCMMN@orange?$AA@
CONST	SEGMENT
??_C@_06HDDOCMMN@orange?$AA@ DB 'orange', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GPLCCBII@noise?$AA@
CONST	SEGMENT
??_C@_05GPLCCBII@noise?$AA@ DB 'noise', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NPLPABOK@neck?$AA@
CONST	SEGMENT
??_C@_04NPLPABOK@neck?$AA@ DB 'neck', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MBOGDMK@nasty?$AA@
CONST	SEGMENT
??_C@_05MBOGDMK@nasty?$AA@ DB 'nasty', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HLKELJGF@memory?$AA@
CONST	SEGMENT
??_C@_06HLKELJGF@memory?$AA@ DB 'memory', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CHNJJJKC@melted?$AA@
CONST	SEGMENT
??_C@_06CHNJJJKC@melted?$AA@ DB 'melted', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JNHCHFHE@maid?$AA@
CONST	SEGMENT
??_C@_04JNHCHFHE@maid?$AA@ DB 'maid', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GLMHKBCH@live?$AA@
CONST	SEGMENT
??_C@_04GLMHKBCH@live?$AA@ DB 'live', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HJPCFDOP@line?$AA@
CONST	SEGMENT
??_C@_04HJPCFDOP@line?$AA@ DB 'line', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EPEIADDB@learn?$AA@
CONST	SEGMENT
??_C@_05EPEIADDB@learn?$AA@ DB 'learn', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JGCCIMAA@language?$AA@
CONST	SEGMENT
??_C@_08JGCCIMAA@language?$AA@ DB 'language', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07PMEJOFLL@jittery?$AA@
CONST	SEGMENT
??_C@_07PMEJOFLL@jittery?$AA@ DB 'jittery', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FDFGBPCA@infamous?$AA@
CONST	SEGMENT
??_C@_08FDFGBPCA@infamous?$AA@ DB 'infamous', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GDPEBLPA@ignore?$AA@
CONST	SEGMENT
??_C@_06GDPEBLPA@ignore?$AA@ DB 'ignore', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PKENOLLO@heap?$AA@
CONST	SEGMENT
??_C@_04PKENOLLO@heap?$AA@ DB 'heap', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MJPBBKHD@heady?$AA@
CONST	SEGMENT
??_C@_05MJPBBKHD@heady?$AA@ DB 'heady', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EMKLAADP@harmony?$AA@
CONST	SEGMENT
??_C@_07EMKLAADP@harmony?$AA@ DB 'harmony', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JECDANNM@harm?$AA@
CONST	SEGMENT
??_C@_04JECDANNM@harm?$AA@ DB 'harm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HGGJKPGK@furtive?$AA@
CONST	SEGMENT
??_C@_07HGGJKPGK@furtive?$AA@ DB 'furtive', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BHBNKPBA@friend?$AA@
CONST	SEGMENT
??_C@_06BHBNKPBA@friend?$AA@ DB 'friend', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ELFMPMHJ@flower?$AA@
CONST	SEGMENT
??_C@_06ELFMPMHJ@flower?$AA@ DB 'flower', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GABGILGN@fix?$AA@
CONST	SEGMENT
??_C@_03GABGILGN@fix?$AA@ DB 'fix', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LEPBNBAJ@experience?$AA@
CONST	SEGMENT
??_C@_0L@LEPBNBAJ@experience?$AA@ DB 'experience', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07NDJOEKBM@eatable?$AA@
CONST	SEGMENT
??_C@_07NDJOEKBM@eatable?$AA@ DB 'eatable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IGFPJNLB@ear?$AA@
CONST	SEGMENT
??_C@_03IGFPJNLB@ear?$AA@ DB 'ear', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08OJIDGIM@discreet?$AA@
CONST	SEGMENT
??_C@_08OJIDGIM@discreet?$AA@ DB 'discreet', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05CFEJGMAI@dirty?$AA@
CONST	SEGMENT
??_C@_05CFEJGMAI@dirty?$AA@ DB 'dirty', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MBEODLMG@devilish?$AA@
CONST	SEGMENT
??_C@_08MBEODLMG@devilish?$AA@ DB 'devilish', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HHOEAOAH@credit?$AA@
CONST	SEGMENT
??_C@_06HHOEAOAH@credit?$AA@ DB 'credit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MGHOCOML@cover?$AA@
CONST	SEGMENT
??_C@_05MGHOCOML@cover?$AA@ DB 'cover', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OKFLLPBK@cooperative?$AA@
CONST	SEGMENT
??_C@_0M@OKFLLPBK@cooperative?$AA@ DB 'cooperative', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07IPBHEOEA@confuse?$AA@
CONST	SEGMENT
??_C@_07IPBHEOEA@confuse?$AA@ DB 'confuse', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IPNIAGNA@complete?$AA@
CONST	SEGMENT
??_C@_08IPNIAGNA@complete?$AA@ DB 'complete', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KLDGHJCK@ceaseless?$AA@
CONST	SEGMENT
??_C@_09KLDGHJCK@ceaseless?$AA@ DB 'ceaseless', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05HGNDGEBA@cause?$AA@
CONST	SEGMENT
??_C@_05HGNDGEBA@cause?$AA@ DB 'cause', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KDNCKLED@broad?$AA@
CONST	SEGMENT
??_C@_05KDNCKLED@broad?$AA@ DB 'broad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09OEHOIJPA@boundless?$AA@
CONST	SEGMENT
??_C@_09OEHOIJPA@boundless?$AA@ DB 'boundless', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OBGPFBCN@blue?$AA@
CONST	SEGMENT
??_C@_04OBGPFBCN@blue?$AA@ DB 'blue', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MKOFIGNL@bird?$AA@
CONST	SEGMENT
??_C@_04MKOFIGNL@bird?$AA@ DB 'bird', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NKAHBJFB@arm?$AA@
CONST	SEGMENT
??_C@_03NKAHBJFB@arm?$AA@ DB 'arm', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06OFEGDHIM@appear?$AA@
CONST	SEGMENT
??_C@_06OFEGDHIM@appear?$AA@ DB 'appear', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09DKPKIKB@apparatus?$AA@
CONST	SEGMENT
??_C@_09DKPKIKB@apparatus?$AA@ DB 'apparatus', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BBJMDMJG@ants?$AA@
CONST	SEGMENT
??_C@_04BBJMDMJG@ants?$AA@ DB 'ants', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GKIGIAGH@advertisement?$AA@
CONST	SEGMENT
??_C@_0O@GKIGIAGH@advertisement?$AA@ DB 'advertisement', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PMBJDDBP@abstracted?$AA@
CONST	SEGMENT
??_C@_0L@PMBJDDBP@abstracted?$AA@ DB 'abstracted', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LJLCIFAG@absorbed?$AA@
CONST	SEGMENT
??_C@_08LJLCIFAG@absorbed?$AA@ DB 'absorbed', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
?gWordList@@3PAPADA DD FLAT:??_C@_08LJLCIFAG@absorbed?$AA@ ; gWordList
	DD	FLAT:??_C@_0L@PMBJDDBP@abstracted?$AA@
	DD	FLAT:??_C@_0O@GKIGIAGH@advertisement?$AA@
	DD	FLAT:??_C@_04BBJMDMJG@ants?$AA@
	DD	FLAT:??_C@_09DKPKIKB@apparatus?$AA@
	DD	FLAT:??_C@_06OFEGDHIM@appear?$AA@
	DD	FLAT:??_C@_03NKAHBJFB@arm?$AA@
	DD	FLAT:??_C@_04MKOFIGNL@bird?$AA@
	DD	FLAT:??_C@_04OBGPFBCN@blue?$AA@
	DD	FLAT:??_C@_09OEHOIJPA@boundless?$AA@
	DD	FLAT:??_C@_05KDNCKLED@broad?$AA@
	DD	FLAT:??_C@_05HGNDGEBA@cause?$AA@
	DD	FLAT:??_C@_09KLDGHJCK@ceaseless?$AA@
	DD	FLAT:??_C@_08IPNIAGNA@complete?$AA@
	DD	FLAT:??_C@_07IPBHEOEA@confuse?$AA@
	DD	FLAT:??_C@_0M@OKFLLPBK@cooperative?$AA@
	DD	FLAT:??_C@_05MGHOCOML@cover?$AA@
	DD	FLAT:??_C@_06HHOEAOAH@credit?$AA@
	DD	FLAT:??_C@_08MBEODLMG@devilish?$AA@
	DD	FLAT:??_C@_05CFEJGMAI@dirty?$AA@
	DD	FLAT:??_C@_08OJIDGIM@discreet?$AA@
	DD	FLAT:??_C@_03IGFPJNLB@ear?$AA@
	DD	FLAT:??_C@_07NDJOEKBM@eatable?$AA@
	DD	FLAT:??_C@_0L@LEPBNBAJ@experience?$AA@
	DD	FLAT:??_C@_03GABGILGN@fix?$AA@
	DD	FLAT:??_C@_06ELFMPMHJ@flower?$AA@
	DD	FLAT:??_C@_06BHBNKPBA@friend?$AA@
	DD	FLAT:??_C@_07HGGJKPGK@furtive?$AA@
	DD	FLAT:??_C@_04JECDANNM@harm?$AA@
	DD	FLAT:??_C@_07EMKLAADP@harmony?$AA@
	DD	FLAT:??_C@_05MJPBBKHD@heady?$AA@
	DD	FLAT:??_C@_04PKENOLLO@heap?$AA@
	DD	FLAT:??_C@_06GDPEBLPA@ignore?$AA@
	DD	FLAT:??_C@_08FDFGBPCA@infamous?$AA@
	DD	FLAT:??_C@_07PMEJOFLL@jittery?$AA@
	DD	FLAT:??_C@_08JGCCIMAA@language?$AA@
	DD	FLAT:??_C@_05EPEIADDB@learn?$AA@
	DD	FLAT:??_C@_04HJPCFDOP@line?$AA@
	DD	FLAT:??_C@_04GLMHKBCH@live?$AA@
	DD	FLAT:??_C@_04JNHCHFHE@maid?$AA@
	DD	FLAT:??_C@_06CHNJJJKC@melted?$AA@
	DD	FLAT:??_C@_06HLKELJGF@memory?$AA@
	DD	FLAT:??_C@_05MBOGDMK@nasty?$AA@
	DD	FLAT:??_C@_04NPLPABOK@neck?$AA@
	DD	FLAT:??_C@_05GPLCCBII@noise?$AA@
	DD	FLAT:??_C@_06HDDOCMMN@orange?$AA@
	DD	FLAT:??_C@_08GBCGCAM@peaceful?$AA@
	DD	FLAT:??_C@_04NMOCCJGM@pine?$AA@
	DD	FLAT:??_C@_07FDGPMDFF@piquant?$AA@
	DD	FLAT:??_C@_09LNCGHMB@pollution?$AA@
	DD	FLAT:??_C@_07JAHNBIFP@precede?$AA@
	DD	FLAT:??_C@_06MBGLFIHO@profit?$AA@
	DD	FLAT:??_C@_06PKAAJPKP@quiver?$AA@
	DD	FLAT:??_C@_09KPCDCNIK@quizzical?$AA@
	DD	FLAT:??_C@_07ENHGAJCI@request?$AA@
	DD	FLAT:??_C@_06BBHCBIOO@rustic?$AA@
	DD	FLAT:??_C@_0L@HGECDLGK@satisfying?$AA@
	DD	FLAT:??_C@_07HKOOFPBJ@scatter?$AA@
	DD	FLAT:??_C@_07PFJHCMJJ@science?$AA@
	DD	FLAT:??_C@_0M@CHNNIJBM@second?9hand?$AA@
	DD	FLAT:??_C@_05LOAHHBMH@shade?$AA@
	DD	FLAT:??_C@_05JBBJEIBB@sharp?$AA@
	DD	FLAT:??_C@_09FDFMFKKK@shivering?$AA@
	DD	FLAT:??_C@_04FKMICODN@show?$AA@
	DD	FLAT:??_C@_05OPIONHBI@solid?$AA@
	DD	FLAT:??_C@_04KLBFFGHE@sore?$AA@
	DD	FLAT:??_C@_09GKFMGHEC@squealing?$AA@
	DD	FLAT:??_C@_05FAGFPHJG@start?$AA@
	DD	FLAT:??_C@_06FHFOAHML@system?$AA@
	DD	FLAT:??_C@_08ENOFDNIN@terrible?$AA@
	DD	FLAT:??_C@_04CEJDCDCH@test?$AA@
	DD	FLAT:??_C@_06CEIHHELM@throne?$AA@
	DD	FLAT:??_C@_05FIHFDHGB@tooth?$AA@
	DD	FLAT:??_C@_07DFEHLGKB@womanly?$AA@
	DD	FLAT:??_C@_09MELHABED@xylophone?$AA@
	DD	FLAT:??_C@_05POKFBJG@zebra?$AA@
_DATA	ENDS
PUBLIC	?inlineBinarySearch@@YAHPADPAH@Z		; inlineBinarySearch
PUBLIC	?printBytes@@YAXPADH@Z				; printBytes
PUBLIC	?callInLineFunctions@@YAXXZ			; callInLineFunctions
PUBLIC	_main
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_05BFHEBJNP@?$CF02X?5?$AA@			; `string'
PUBLIC	??_C@_02PHMGELLB@?6?6?$AA@			; `string'
PUBLIC	??_C@_06JOMBIOEF@aaaaaa?$AA@			; `string'
PUBLIC	??_C@_0CK@PBCDDEIN@The?5word?5?$CC?$CFs?$CC?5not?5found?$CB?5Steps?5t@ ; `string'
PUBLIC	??_C@_0DG@MPGKMAKN@Element?5?$CD?$CF3d?5?5Steps?3?5?$CF2d?5?9?5The?5w@ ; `string'
PUBLIC	??_C@_06LLGEEFCP@zzzzzz?$AA@			; `string'
PUBLIC	??_C@_08PJHGBINL@bluebird?$AA@			; `string'
PUBLIC	??_C@_07GKGAGMNN@project?$AA@			; `string'
PUBLIC	??_C@_05BIMBDNDC@black?$AA@			; `string'
EXTRN	_strcpy:PROC
EXTRN	_exit:PROC
EXTRN	_printf:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_05BIMBDNDC@black?$AA@
CONST	SEGMENT
??_C@_05BIMBDNDC@black?$AA@ DB 'black', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GKGAGMNN@project?$AA@
CONST	SEGMENT
??_C@_07GKGAGMNN@project?$AA@ DB 'project', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PJHGBINL@bluebird?$AA@
CONST	SEGMENT
??_C@_08PJHGBINL@bluebird?$AA@ DB 'bluebird', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06LLGEEFCP@zzzzzz?$AA@
CONST	SEGMENT
??_C@_06LLGEEFCP@zzzzzz?$AA@ DB 'zzzzzz', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@MPGKMAKN@Element?5?$CD?$CF3d?5?5Steps?3?5?$CF2d?5?9?5The?5w@
CONST	SEGMENT
??_C@_0DG@MPGKMAKN@Element?5?$CD?$CF3d?5?5Steps?3?5?$CF2d?5?9?5The?5w@ DB 'E'
	DB	'lement #%3d  Steps: %2d - The word "%s" was found.', 0aH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PBCDDEIN@The?5word?5?$CC?$CFs?$CC?5not?5found?$CB?5Steps?5t@
CONST	SEGMENT
??_C@_0CK@PBCDDEIN@The?5word?5?$CC?$CFs?$CC?5not?5found?$CB?5Steps?5t@ DB 'T'
	DB	'he word "%s" not found! Steps taken=%d', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JOMBIOEF@aaaaaa?$AA@
CONST	SEGMENT
??_C@_06JOMBIOEF@aaaaaa?$AA@ DB 'aaaaaa', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02PHMGELLB@?6?6?$AA@
CONST	SEGMENT
??_C@_02PHMGELLB@?6?6?$AA@ DB 0aH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BFHEBJNP@?$CF02X?5?$AA@
CONST	SEGMENT
??_C@_05BFHEBJNP@?$CF02X?5?$AA@ DB '%02X ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\homework09\homework09\2018 06 cs 3843 hw 09 - inlinestudent.cpp
;	COMDAT _main
_TEXT	SEGMENT
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_main	PROC						; COMDAT

; 277  : void main(int argc, char *argv[]){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 278  : 	callInLineFunctions();

  0001e	e8 00 00 00 00	 call	 ?callInLineFunctions@@YAXXZ ; callInLineFunctions

; 279  : }

  00023	33 c0		 xor	 eax, eax
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\homework09\homework09\2018 06 cs 3843 hw 09 - inlinestudent.cpp
;	COMDAT ?callInLineFunctions@@YAXXZ
_TEXT	SEGMENT
_z$1 = -120						; size = 4
_gListLength$ = -108					; size = 4
_word$ = -96						; size = 64
_tmpi$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?callInLineFunctions@@YAXXZ PROC			; callInLineFunctions, COMDAT

; 214  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd c4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-316]
  00012	b9 4f 00 00 00	 mov	 ecx, 79			; 0000004fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 215  : 	int x, tmpi;
; 216  : 	char word[64];
; 217  : 
; 218  : //*	Start Binary Search Test Cases
; 219  : 
; 220  : 	// get the length of the word list
; 221  : 	int gListLength = sizeof(gWordList) / sizeof( char *);		// get size of word list

  00028	c7 45 94 4c 00
	00 00		 mov	 DWORD PTR _gListLength$[ebp], 76 ; 0000004cH

; 222  : 
; 223  : // Test Before/After the list
; 224  : 	strcpy(word, "aaaaaa");

  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_06JOMBIOEF@aaaaaa?$AA@
  00034	8d 45 a0	 lea	 eax, DWORD PTR _word$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _strcpy
  0003d	83 c4 08	 add	 esp, 8

; 225  : 	tmpi = inlineBinarySearch(word, &x);

  00040	8d 45 f4	 lea	 eax, DWORD PTR _x$[ebp]
  00043	50		 push	 eax
  00044	8d 4d a0	 lea	 ecx, DWORD PTR _word$[ebp]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ?inlineBinarySearch@@YAHPADPAH@Z ; inlineBinarySearch
  0004d	83 c4 08	 add	 esp, 8
  00050	89 45 e8	 mov	 DWORD PTR _tmpi$[ebp], eax

; 226  : 	if(tmpi == -1)

  00053	83 7d e8 ff	 cmp	 DWORD PTR _tmpi$[ebp], -1
  00057	75 17		 jne	 SHORT $LN15@callInLine

; 227  : 		printf("The word \"%s\" not found! Steps taken=%d\n\n", word, x);

  00059	8b 45 f4	 mov	 eax, DWORD PTR _x$[ebp]
  0005c	50		 push	 eax
  0005d	8d 4d a0	 lea	 ecx, DWORD PTR _word$[ebp]
  00060	51		 push	 ecx
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@PBCDDEIN@The?5word?5?$CC?$CFs?$CC?5not?5found?$CB?5Steps?5t@
  00066	e8 00 00 00 00	 call	 _printf
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 228  : 	else

  0006e	eb 19		 jmp	 SHORT $LN14@callInLine
$LN15@callInLine:

; 229  : 		printf("Element #%3d  Steps: %2d - The word \"%s\" was found.\n\n", tmpi, x, word);

  00070	8d 45 a0	 lea	 eax, DWORD PTR _word$[ebp]
  00073	50		 push	 eax
  00074	8b 4d f4	 mov	 ecx, DWORD PTR _x$[ebp]
  00077	51		 push	 ecx
  00078	8b 55 e8	 mov	 edx, DWORD PTR _tmpi$[ebp]
  0007b	52		 push	 edx
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@MPGKMAKN@Element?5?$CD?$CF3d?5?5Steps?3?5?$CF2d?5?9?5The?5w@
  00081	e8 00 00 00 00	 call	 _printf
  00086	83 c4 10	 add	 esp, 16			; 00000010H
$LN14@callInLine:

; 230  : 
; 231  : 	strcpy(word, "zzzzzz");

  00089	68 00 00 00 00	 push	 OFFSET ??_C@_06LLGEEFCP@zzzzzz?$AA@
  0008e	8d 45 a0	 lea	 eax, DWORD PTR _word$[ebp]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 _strcpy
  00097	83 c4 08	 add	 esp, 8

; 232  : 	tmpi = inlineBinarySearch(word, &x);

  0009a	8d 45 f4	 lea	 eax, DWORD PTR _x$[ebp]
  0009d	50		 push	 eax
  0009e	8d 4d a0	 lea	 ecx, DWORD PTR _word$[ebp]
  000a1	51		 push	 ecx
  000a2	e8 00 00 00 00	 call	 ?inlineBinarySearch@@YAHPADPAH@Z ; inlineBinarySearch
  000a7	83 c4 08	 add	 esp, 8
  000aa	89 45 e8	 mov	 DWORD PTR _tmpi$[ebp], eax

; 233  : 	if(tmpi == -1)

  000ad	83 7d e8 ff	 cmp	 DWORD PTR _tmpi$[ebp], -1
  000b1	75 17		 jne	 SHORT $LN13@callInLine

; 234  : 		printf("The word \"%s\" not found! Steps taken=%d\n\n", word, x);

  000b3	8b 45 f4	 mov	 eax, DWORD PTR _x$[ebp]
  000b6	50		 push	 eax
  000b7	8d 4d a0	 lea	 ecx, DWORD PTR _word$[ebp]
  000ba	51		 push	 ecx
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@PBCDDEIN@The?5word?5?$CC?$CFs?$CC?5not?5found?$CB?5Steps?5t@
  000c0	e8 00 00 00 00	 call	 _printf
  000c5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 235  : 	else

  000c8	eb 19		 jmp	 SHORT $LN12@callInLine
$LN13@callInLine:

; 236  : 		printf("Element #%3d  Steps: %2d - The word \"%s\" was found.\n\n", tmpi, x, word);

  000ca	8d 45 a0	 lea	 eax, DWORD PTR _word$[ebp]
  000cd	50		 push	 eax
  000ce	8b 4d f4	 mov	 ecx, DWORD PTR _x$[ebp]
  000d1	51		 push	 ecx
  000d2	8b 55 e8	 mov	 edx, DWORD PTR _tmpi$[ebp]
  000d5	52		 push	 edx
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@MPGKMAKN@Element?5?$CD?$CF3d?5?5Steps?3?5?$CF2d?5?9?5The?5w@
  000db	e8 00 00 00 00	 call	 _printf
  000e0	83 c4 10	 add	 esp, 16			; 00000010H
$LN12@callInLine:

; 237  : 
; 238  : 	strcpy(word, "bluebird");

  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_08PJHGBINL@bluebird?$AA@
  000e8	8d 45 a0	 lea	 eax, DWORD PTR _word$[ebp]
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 _strcpy
  000f1	83 c4 08	 add	 esp, 8

; 239  : 	tmpi = inlineBinarySearch(word, &x);

  000f4	8d 45 f4	 lea	 eax, DWORD PTR _x$[ebp]
  000f7	50		 push	 eax
  000f8	8d 4d a0	 lea	 ecx, DWORD PTR _word$[ebp]
  000fb	51		 push	 ecx
  000fc	e8 00 00 00 00	 call	 ?inlineBinarySearch@@YAHPADPAH@Z ; inlineBinarySearch
  00101	83 c4 08	 add	 esp, 8
  00104	89 45 e8	 mov	 DWORD PTR _tmpi$[ebp], eax

; 240  : 	if(tmpi == -1)

  00107	83 7d e8 ff	 cmp	 DWORD PTR _tmpi$[ebp], -1
  0010b	75 17		 jne	 SHORT $LN11@callInLine

; 241  : 		printf("The word \"%s\" not found! Steps taken=%d\n\n", word, x);

  0010d	8b 45 f4	 mov	 eax, DWORD PTR _x$[ebp]
  00110	50		 push	 eax
  00111	8d 4d a0	 lea	 ecx, DWORD PTR _word$[ebp]
  00114	51		 push	 ecx
  00115	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@PBCDDEIN@The?5word?5?$CC?$CFs?$CC?5not?5found?$CB?5Steps?5t@
  0011a	e8 00 00 00 00	 call	 _printf
  0011f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 242  : 	else

  00122	eb 19		 jmp	 SHORT $LN10@callInLine
$LN11@callInLine:

; 243  : 		printf("Element #%3d  Steps: %2d - The word \"%s\" was found.\n\n", tmpi, x, word);

  00124	8d 45 a0	 lea	 eax, DWORD PTR _word$[ebp]
  00127	50		 push	 eax
  00128	8b 4d f4	 mov	 ecx, DWORD PTR _x$[ebp]
  0012b	51		 push	 ecx
  0012c	8b 55 e8	 mov	 edx, DWORD PTR _tmpi$[ebp]
  0012f	52		 push	 edx
  00130	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@MPGKMAKN@Element?5?$CD?$CF3d?5?5Steps?3?5?$CF2d?5?9?5The?5w@
  00135	e8 00 00 00 00	 call	 _printf
  0013a	83 c4 10	 add	 esp, 16			; 00000010H
$LN10@callInLine:

; 244  : 
; 245  : 	strcpy(word, "project");

  0013d	68 00 00 00 00	 push	 OFFSET ??_C@_07GKGAGMNN@project?$AA@
  00142	8d 45 a0	 lea	 eax, DWORD PTR _word$[ebp]
  00145	50		 push	 eax
  00146	e8 00 00 00 00	 call	 _strcpy
  0014b	83 c4 08	 add	 esp, 8

; 246  : 	tmpi = inlineBinarySearch(word, &x);

  0014e	8d 45 f4	 lea	 eax, DWORD PTR _x$[ebp]
  00151	50		 push	 eax
  00152	8d 4d a0	 lea	 ecx, DWORD PTR _word$[ebp]
  00155	51		 push	 ecx
  00156	e8 00 00 00 00	 call	 ?inlineBinarySearch@@YAHPADPAH@Z ; inlineBinarySearch
  0015b	83 c4 08	 add	 esp, 8
  0015e	89 45 e8	 mov	 DWORD PTR _tmpi$[ebp], eax

; 247  : 	if(tmpi == -1)

  00161	83 7d e8 ff	 cmp	 DWORD PTR _tmpi$[ebp], -1
  00165	75 17		 jne	 SHORT $LN9@callInLine

; 248  : 		printf("The word \"%s\" not found! Steps taken=%d\n\n", word, x);

  00167	8b 45 f4	 mov	 eax, DWORD PTR _x$[ebp]
  0016a	50		 push	 eax
  0016b	8d 4d a0	 lea	 ecx, DWORD PTR _word$[ebp]
  0016e	51		 push	 ecx
  0016f	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@PBCDDEIN@The?5word?5?$CC?$CFs?$CC?5not?5found?$CB?5Steps?5t@
  00174	e8 00 00 00 00	 call	 _printf
  00179	83 c4 0c	 add	 esp, 12			; 0000000cH

; 249  : 	else

  0017c	eb 19		 jmp	 SHORT $LN8@callInLine
$LN9@callInLine:

; 250  : 		printf("Element #%3d  Steps: %2d - The word \"%s\" was found.\n\n", tmpi, x, word);

  0017e	8d 45 a0	 lea	 eax, DWORD PTR _word$[ebp]
  00181	50		 push	 eax
  00182	8b 4d f4	 mov	 ecx, DWORD PTR _x$[ebp]
  00185	51		 push	 ecx
  00186	8b 55 e8	 mov	 edx, DWORD PTR _tmpi$[ebp]
  00189	52		 push	 edx
  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@MPGKMAKN@Element?5?$CD?$CF3d?5?5Steps?3?5?$CF2d?5?9?5The?5w@
  0018f	e8 00 00 00 00	 call	 _printf
  00194	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@callInLine:

; 251  : 
; 252  : 	strcpy(word, "black");

  00197	68 00 00 00 00	 push	 OFFSET ??_C@_05BIMBDNDC@black?$AA@
  0019c	8d 45 a0	 lea	 eax, DWORD PTR _word$[ebp]
  0019f	50		 push	 eax
  001a0	e8 00 00 00 00	 call	 _strcpy
  001a5	83 c4 08	 add	 esp, 8

; 253  : 	tmpi = inlineBinarySearch(word, &x);

  001a8	8d 45 f4	 lea	 eax, DWORD PTR _x$[ebp]
  001ab	50		 push	 eax
  001ac	8d 4d a0	 lea	 ecx, DWORD PTR _word$[ebp]
  001af	51		 push	 ecx
  001b0	e8 00 00 00 00	 call	 ?inlineBinarySearch@@YAHPADPAH@Z ; inlineBinarySearch
  001b5	83 c4 08	 add	 esp, 8
  001b8	89 45 e8	 mov	 DWORD PTR _tmpi$[ebp], eax

; 254  : 	if(tmpi == -1)

  001bb	83 7d e8 ff	 cmp	 DWORD PTR _tmpi$[ebp], -1
  001bf	75 17		 jne	 SHORT $LN7@callInLine

; 255  : 		printf("The word \"%s\" not found! Steps taken=%d\n\n", word, x);

  001c1	8b 45 f4	 mov	 eax, DWORD PTR _x$[ebp]
  001c4	50		 push	 eax
  001c5	8d 4d a0	 lea	 ecx, DWORD PTR _word$[ebp]
  001c8	51		 push	 ecx
  001c9	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@PBCDDEIN@The?5word?5?$CC?$CFs?$CC?5not?5found?$CB?5Steps?5t@
  001ce	e8 00 00 00 00	 call	 _printf
  001d3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 256  : 	else

  001d6	eb 19		 jmp	 SHORT $LN6@callInLine
$LN7@callInLine:

; 257  : 		printf("Element #%3d  Steps: %2d - The word \"%s\" was found.\n\n", tmpi, x, word);

  001d8	8d 45 a0	 lea	 eax, DWORD PTR _word$[ebp]
  001db	50		 push	 eax
  001dc	8b 4d f4	 mov	 ecx, DWORD PTR _x$[ebp]
  001df	51		 push	 ecx
  001e0	8b 55 e8	 mov	 edx, DWORD PTR _tmpi$[ebp]
  001e3	52		 push	 edx
  001e4	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@MPGKMAKN@Element?5?$CD?$CF3d?5?5Steps?3?5?$CF2d?5?9?5The?5w@
  001e9	e8 00 00 00 00	 call	 _printf
  001ee	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@callInLine:

; 258  : 
; 259  : // Check for words not on the list, but would be in the middle
; 260  : 
; 261  : // Check the entire list to make sure we can find any word
; 262  : 	for(int z = 0; z < gListLength; z++)

  001f1	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _z$1[ebp], 0
  001f8	eb 09		 jmp	 SHORT $LN5@callInLine
$LN4@callInLine:
  001fa	8b 45 88	 mov	 eax, DWORD PTR _z$1[ebp]
  001fd	83 c0 01	 add	 eax, 1
  00200	89 45 88	 mov	 DWORD PTR _z$1[ebp], eax
$LN5@callInLine:
  00203	8b 45 88	 mov	 eax, DWORD PTR _z$1[ebp]
  00206	3b 45 94	 cmp	 eax, DWORD PTR _gListLength$[ebp]
  00209	7d 62		 jge	 SHORT $LN3@callInLine

; 263  : 	{
; 264  : 		strcpy(word, gWordList[z]);

  0020b	8b 45 88	 mov	 eax, DWORD PTR _z$1[ebp]
  0020e	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?gWordList@@3PAPADA[eax*4]
  00215	51		 push	 ecx
  00216	8d 55 a0	 lea	 edx, DWORD PTR _word$[ebp]
  00219	52		 push	 edx
  0021a	e8 00 00 00 00	 call	 _strcpy
  0021f	83 c4 08	 add	 esp, 8

; 265  : 		tmpi = inlineBinarySearch(word, &x);

  00222	8d 45 f4	 lea	 eax, DWORD PTR _x$[ebp]
  00225	50		 push	 eax
  00226	8d 4d a0	 lea	 ecx, DWORD PTR _word$[ebp]
  00229	51		 push	 ecx
  0022a	e8 00 00 00 00	 call	 ?inlineBinarySearch@@YAHPADPAH@Z ; inlineBinarySearch
  0022f	83 c4 08	 add	 esp, 8
  00232	89 45 e8	 mov	 DWORD PTR _tmpi$[ebp], eax

; 266  : 		if(tmpi == -1)

  00235	83 7d e8 ff	 cmp	 DWORD PTR _tmpi$[ebp], -1
  00239	75 17		 jne	 SHORT $LN2@callInLine

; 267  : 			printf("The word \"%s\" not found! Steps taken=%d\n\n", word, x);

  0023b	8b 45 f4	 mov	 eax, DWORD PTR _x$[ebp]
  0023e	50		 push	 eax
  0023f	8d 4d a0	 lea	 ecx, DWORD PTR _word$[ebp]
  00242	51		 push	 ecx
  00243	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@PBCDDEIN@The?5word?5?$CC?$CFs?$CC?5not?5found?$CB?5Steps?5t@
  00248	e8 00 00 00 00	 call	 _printf
  0024d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 268  : 		else

  00250	eb 19		 jmp	 SHORT $LN1@callInLine
$LN2@callInLine:

; 269  : 			printf("Element #%3d  Steps: %2d - The word \"%s\" was found.\n\n", tmpi, x, word);

  00252	8d 45 a0	 lea	 eax, DWORD PTR _word$[ebp]
  00255	50		 push	 eax
  00256	8b 4d f4	 mov	 ecx, DWORD PTR _x$[ebp]
  00259	51		 push	 ecx
  0025a	8b 55 e8	 mov	 edx, DWORD PTR _tmpi$[ebp]
  0025d	52		 push	 edx
  0025e	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@MPGKMAKN@Element?5?$CD?$CF3d?5?5Steps?3?5?$CF2d?5?9?5The?5w@
  00263	e8 00 00 00 00	 call	 _printf
  00268	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@callInLine:

; 270  : 	}

  0026b	eb 8d		 jmp	 SHORT $LN4@callInLine
$LN3@callInLine:

; 271  : 
; 272  : //*/	End Binary Search
; 273  : 
; 274  : 	exit(0);

  0026d	6a 00		 push	 0
  0026f	e8 00 00 00 00	 call	 _exit
$LN17@callInLine:

; 275  : } // callInLineFunctions

  00274	52		 push	 edx
  00275	8b cd		 mov	 ecx, ebp
  00277	50		 push	 eax
  00278	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN21@callInLine
  0027e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00283	58		 pop	 eax
  00284	5a		 pop	 edx
  00285	5f		 pop	 edi
  00286	5e		 pop	 esi
  00287	5b		 pop	 ebx
  00288	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0028b	33 cd		 xor	 ecx, ebp
  0028d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00292	81 c4 3c 01 00
	00		 add	 esp, 316		; 0000013cH
  00298	3b ec		 cmp	 ebp, esp
  0029a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0029f	8b e5		 mov	 esp, ebp
  002a1	5d		 pop	 ebp
  002a2	c3		 ret	 0
  002a3	90		 npad	 1
$LN21@callInLine:
  002a4	02 00 00 00	 DD	 2
  002a8	00 00 00 00	 DD	 $LN20@callInLine
$LN20@callInLine:
  002ac	f4 ff ff ff	 DD	 -12			; fffffff4H
  002b0	04 00 00 00	 DD	 4
  002b4	00 00 00 00	 DD	 $LN18@callInLine
  002b8	a0 ff ff ff	 DD	 -96			; ffffffa0H
  002bc	40 00 00 00	 DD	 64			; 00000040H
  002c0	00 00 00 00	 DD	 $LN19@callInLine
$LN19@callInLine:
  002c4	77		 DB	 119			; 00000077H
  002c5	6f		 DB	 111			; 0000006fH
  002c6	72		 DB	 114			; 00000072H
  002c7	64		 DB	 100			; 00000064H
  002c8	00		 DB	 0
$LN18@callInLine:
  002c9	78		 DB	 120			; 00000078H
  002ca	00		 DB	 0
?callInLineFunctions@@YAXXZ ENDP			; callInLineFunctions
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\homework09\homework09\2018 06 cs 3843 hw 09 - inlinestudent.cpp
;	COMDAT ?printBytes@@YAXPADH@Z
_TEXT	SEGMENT
_x$ = -8						; size = 4
_data$ = 8						; size = 4
_length$ = 12						; size = 4
?printBytes@@YAXPADH@Z PROC				; printBytes, COMDAT

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 200  : 	int x;
; 201  : 
; 202  : 	for(x = 0; x < length; x++)

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  00025	eb 09		 jmp	 SHORT $LN4@printBytes
$LN3@printBytes:
  00027	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  0002a	83 c0 01	 add	 eax, 1
  0002d	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
$LN4@printBytes:
  00030	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  00033	3b 45 0c	 cmp	 eax, DWORD PTR _length$[ebp]
  00036	7d 2e		 jge	 SHORT $LN2@printBytes

; 203  : 	{
; 204  : 		if( (x & 0xF) == 0) printf("\n");

  00038	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  0003b	83 e0 0f	 and	 eax, 15			; 0000000fH
  0003e	75 0d		 jne	 SHORT $LN1@printBytes
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  00045	e8 00 00 00 00	 call	 _printf
  0004a	83 c4 04	 add	 esp, 4
$LN1@printBytes:

; 205  : 		printf("%02X ", (unsigned char) data[x]);

  0004d	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00050	03 45 f8	 add	 eax, DWORD PTR _x$[ebp]
  00053	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00056	51		 push	 ecx
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_05BFHEBJNP@?$CF02X?5?$AA@
  0005c	e8 00 00 00 00	 call	 _printf
  00061	83 c4 08	 add	 esp, 8

; 206  : 	}

  00064	eb c1		 jmp	 SHORT $LN3@printBytes
$LN2@printBytes:

; 207  : 	printf("\n\n");

  00066	68 00 00 00 00	 push	 OFFSET ??_C@_02PHMGELLB@?6?6?$AA@
  0006b	e8 00 00 00 00	 call	 _printf
  00070	83 c4 04	 add	 esp, 4

; 208  : 
; 209  : 	return;
; 210  : } // printBytes

  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0007c	3b ec		 cmp	 ebp, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
?printBytes@@YAXPADH@Z ENDP				; printBytes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\homework09\homework09\2018 06 cs 3843 hw 09 - inlinestudent.cpp
;	COMDAT ?inlineBinarySearch@@YAHPADPAH@Z
_TEXT	SEGMENT
_elementNumber$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_searchWord$ = 8					; size = 4
_numSteps$ = 12						; size = 4
?inlineBinarySearch@@YAHPADPAH@Z PROC			; inlineBinarySearch, COMDAT

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 94   : 	int elementNumber = -1;

  00028	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _elementNumber$[ebp], -1

; 95   : 
; 96   : 	*numSteps = 0;

  0002f	8b 45 0c	 mov	 eax, DWORD PTR _numSteps$[ebp]
  00032	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 97   : 
; 98   : 	__asm {
; 99   : 
; 100  : 		//mov elementNumber, 4	// puts a 4 in the return value
; 101  : 		//mov edi,numSteps		// how to access numSteps
; 102  : 		//mov [edi],25
; 103  : 
; 104  : 		//xor eax,eax
; 105  : 		//lea edi,gWordList		// this gets the base address of array of character pointers
; 106  : 		//mov esi,[edi]			// address of first word in esi
; 107  : 		//mov al,[esi]			// first letter of first word
; 108  : 		//mov elementNumber,eax	// return 97 which is character 'a'
; 109  : 
; 110  : 		//add edi,0x50			// get to address of 21st word = "discreet"  (word #20 in list, 20 * 4 = 80)
; 111  : 		//mov esi,[edi]			// get address where 21st word is stored in memory
; 112  : 		//mov al,[esi+1]			// put 2nd character from "discreet" which is an 'i' = 0x69 (105)
; 113  : 		//mov elementNumber,eax
; 114  : 		//mov edx, [edi + ecx * 4]	 //edx == first
; 115  : 		//mov ebx, last	//ebx == last
; 116  : 		xor ecx, ecx

  00038	33 c9		 xor	 ecx, ecx

; 117  : 		lea edi, gWordList					//edi == gWordList

  0003a	8d 3d 00 00 00
	00		 lea	 edi, OFFSET ?gWordList@@3PAPADA

; 118  : 		mov edx, [edi]			//edx == first word in gWordList

  00040	8b 17		 mov	 edx, DWORD PTR [edi]

; 119  : 
; 120  : 		mov ecx, 74							//ecx == array length -1

  00042	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH

; 121  : 		mov ebx, [edi + ecx * 4]			//ebx == last word in gWordList

  00047	8b 1c 8f	 mov	 ebx, DWORD PTR [edi+ecx*4]

; 122  : 		xor ecx, ecx

  0004a	33 c9		 xor	 ecx, ecx

; 123  : 		mov eax, 74

  0004c	b8 4a 00 00 00	 mov	 eax, 74			; 0000004aH

; 124  : 		shl eax, 2

  00051	c1 e0 02	 shl	 eax, 2
$BeginL$3:

; 125  : 	BeginL :
; 126  : 			cmp edx, ebx	//cmp edx and ebx

  00054	3b d3		 cmp	 edx, ebx

; 127  : 			ja EndBad

  00056	77 1d		 ja	 SHORT $EndBad$4

; 128  : 
; 129  : 			//mov eax, ebx	//eax == first
; 130  : 			//add eax, ebx	//eax == first + last
; 131  : 			//shr eax, 1		// eax == (first + last) >> 1
; 132  : 			shr eax, 1

  00058	d1 e8		 shr	 eax, 1

; 133  : 
; 134  : 			mov esi, [edi + eax]		//esi == sortedArray[mid]

  0005a	8b 34 07	 mov	 esi, DWORD PTR [edi+eax]

; 135  : 			//cmp searchWord, esi				//cmp key and esi
; 136  : 
; 137  : 			jmp DopeCompare						//compare our two current strings

  0005d	eb 1f		 jmp	 SHORT $DopeCompare$5
$Return$6:

; 138  : 
; 139  : 		Return :
; 140  : 			cmp eax, 0

  0005f	83 f8 00	 cmp	 eax, 0

; 141  : 			popad

  00062	61		 popad

; 142  : 
; 143  : 			je Equal						//_if(key == edx) jmpto Equal

  00063	74 47		 je	 SHORT $Equal$7

; 144  : 			jl LessThan						//if(key < edx) jmpto LessThan

  00065	7c 07		 jl	 SHORT $LessThan$8

; 145  : 
; 146  : 			mov edx, esi					//first = mid

  00067	8b d6		 mov	 edx, esi

; 147  : 			add edx, 4						//first = mid + 1

  00069	83 c2 04	 add	 edx, 4

; 148  : 			jmp BeginL						//loop

  0006c	eb e6		 jmp	 SHORT $BeginL$3
$LessThan$8:

; 149  : 
; 150  : 		LessThan :
; 151  : 			mov ebx, esi					//last = mid

  0006e	8b de		 mov	 ebx, esi

; 152  : 			sub ebx, 4						//last = mid - 1

  00070	83 eb 04	 sub	 ebx, 4

; 153  : 			jmp BeginL						//loop

  00073	eb df		 jmp	 SHORT $BeginL$3
$EndBad$4:

; 154  : 
; 155  : 		EndBad :
; 156  : 			mov elementNumber, -1					//value not found

  00075	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _elementNumber$[ebp], -1

; 157  : 			jmp EndL

  0007c	eb 31		 jmp	 SHORT $EndL$9
$DopeCompare$5:

; 158  : 
; 159  : 		DopeCompare :
; 160  : 			pushad

  0007e	60		 pushad

; 161  : 			xor ecx, ecx

  0007f	33 c9		 xor	 ecx, ecx
$dankLOOP$10:

; 162  : 
; 163  : 		dankLOOP :
; 164  : 			mov eax, 0x0

  00081	b8 00 00 00 00	 mov	 eax, 0

; 165  : 			mov dl, byte ptr [esi + ecx]

  00086	8a 14 0e	 mov	 dl, BYTE PTR [esi+ecx]

; 166  : 			mov bl, byte ptr [searchWord + ecx]

  00089	8a 9c 0d 08 00
	00 00		 mov	 bl, BYTE PTR _searchWord$[ebp+ecx]

; 167  : 			inc ecx 

  00090	41		 inc	 ecx

; 168  : 			
; 169  : 			cmp dl, bl

  00091	3a d3		 cmp	 dl, bl

; 170  : 			mov eax, -1

  00093	b8 ff ff ff ff	 mov	 eax, -1

; 171  : 			jl Return

  00098	7c c5		 jl	 SHORT $Return$6

; 172  : 			mov eax, 1

  0009a	b8 01 00 00 00	 mov	 eax, 1

; 173  : 			jg Return

  0009f	7f be		 jg	 SHORT $Return$6

; 174  : 			mov eax, 0x0

  000a1	b8 00 00 00 00	 mov	 eax, 0

; 175  : 			test dl, dl

  000a6	84 d2		 test	 dl, dl

; 176  : 			je Return

  000a8	74 b5		 je	 SHORT $Return$6

; 177  : 
; 178  : 
; 179  : 			jmp dankLOOP

  000aa	eb d5		 jmp	 SHORT $dankLOOP$10
$Equal$7:

; 180  : 
; 181  : 			
; 182  : 			
; 183  : 
; 184  : 			
; 185  : 			
; 186  : 			
; 187  : 			
; 188  : 
; 189  : 		Equal :
; 190  : 			mov elementNumber, eax					//value found, retval = eax, end

  000ac	89 45 f4	 mov	 DWORD PTR _elementNumber$[ebp], eax
$EndL$9:

; 191  : 		EndL :
; 192  : 	}
; 193  : 
; 194  : 	return elementNumber;

  000af	8b 45 f4	 mov	 eax, DWORD PTR _elementNumber$[ebp]

; 195  : } // inlineBinarySearch

  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	5b		 pop	 ebx
  000b5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b8	33 cd		 xor	 ecx, ebp
  000ba	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bf	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  000c5	3b ec		 cmp	 ebp, esp
  000c7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
?inlineBinarySearch@@YAHPADPAH@Z ENDP			; inlineBinarySearch
_TEXT	ENDS
END
